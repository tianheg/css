@charset "UTF-8";
@import '../../../assets/fonts.css';

// @namespace
* {
  box-sizing: border-box;
}

:root {
  font-size: 62.5%;
}

// margin, padding only with <body> work, not <html>
body {
  margin: 0;
  padding: 0;
  font-size: 1.6rem;
  font-family: 'Open Sans', sans-serif;
  background-color: rgba(128, 128, 128, 0.9);
}

main {
  margin: 2rem 1rem;
  padding: 0 1rem;
  border: 1.2rem dotted #b3a9a9;
  border-radius: 1.2rem 1.2rem 1.2rem 1.2rem;

  .flexbox {
    display: flex;
    justify-content: center;

    @media (max-width: 30em) {
      flex-direction: column;
      align-items: center;
    }
  }

  h1 {
    font-size: 4rem;
    text-shadow: 0.3rem 0.3rem 0.5rem rgb(4, 255, 0);

    &:hover {
      // box-shadow: inset 0 0 .2em rgba(255, 255, 255, 0.05),
      //   inset .4em .4em .6em rgba(0, 0, 0, 0.2);
      color: yellow;
      text-shadow: 0 0 4.5rem yellow, 0 0 5.5rem yellow;
      animation: glow 1.5s linear infinite;
    }

    @keyframes glow {
      0% {
        filter: hue-rotate(0deg);
      }

      100% {
        filter: hue-rotate(360deg);
      }
    }
  }

  img {
    aspect-ratio: auto 16 / 9;
    height: 6.7rem;
    margin: 2rem 0 0 1rem;
  }

  p {
    font-size: 1.6rem;
    line-height: 1.5;
    letter-spacing: 0.1rem;

    a {
      color: inherit;
      text-underline-offset: 0.5rem;

      &:hover {
        color: rgba(42, 109, 244, 1);
        font-size: 2rem;
      }

      &[href^='http'] {
        background: url('external-link-52.png') no-repeat 100% 0;
        background-size: 1.6rem 1.6rem;
        padding-right: 1.9rem;
      }
    }
  }

  // .para1 {
  //   color: pink;
  // }

  // #para1 {
  //   color: greenyellow;
  // }

  p {
    color: navy;
  }

  p {
    color: black;
  }

  p:nth-child(3) {
    color: red;
  }

  // https://moderncss.dev/totally-custom-list-styles/
  .lists {
    display: flex;
    justify-content: space-around;
    margin-bottom: 1rem;

    :is(ul, ol) > li {
      display: grid;
      grid-template-columns: 0 1fr;
      gap: 2.75rem;
      align-items: start;
      line-height: 1.5;
    }

    ul,
    ol {
      margin: 0;
      padding: 0;
      list-style: none;
      display: grid;
      gap: 1rem;
    }

    ul > li::before {
      content: attr(data-icon);
      font-size: 1.6rem;
    }

    ol {
      --li-bg: purple;
      counter-reset: orderedlist;

      li::before {
        counter-increment: orderedlist;
        content: counter(orderedlist);
        font-family: 'Indie Flower', cursive;
        font-size: 1.6rem;
        line-height: 1.5;
        width: 2.4rem;
        text-align: center;
        color: #fff;
        background-color: var(--li-bg);
        border-radius: 0.85rem;
      }
    }

    @media (max-width: 30em) {
      flex-direction: column;
      align-items: center;

      ul,
      ol {
        margin: 1rem 0;
      }
    }
  }

  & > .outer {
    border: 0.1rem solid black;

    .box:nth-child(1) {
      padding: 1rem;
      width: calc(90% - 30px);
      background: rgb(238, 59, 5);
      color: white;
    }
  }

  .flexbox2 {
    border: 0.1rem solid black;
    margin: 10rem;
    display: flex;
    justify-content: center;

    .outer {
      &:nth-child(1) {
        border-right: 0.05rem solid black;

        .box {
          margin: 2rem;
          width: 10rem;
          height: 10rem;
          background: rgb(17, 229, 102);
          transform: rotate(0.8turn);
        }
      }

      &:nth-child(2) {
        border-left: 0.05rem solid black;

        .box {
          margin: 2rem;
          width: 10rem;
          height: 10rem;
          background: rgb(17, 229, 102);
          transform: rotate(-0.8turn);
        }
      }
    }
  }

  .counter-style {
    & > ul {
      list-style: blacknwhite;
    }
  }

  .shorthands {
    & > div {
      // font-size is the last
      // line-height is optional
      // if add line-height, must this style: font-size/line-height
      // https://developer.mozilla.org/en-US/docs/Web/CSS/font#syntax
      // https://css-tricks.com/almanac/properties/f/font/
      font: expanded italic small-caps bold 50px/2 'Indie Flower', cursive;
      border: 1rem dotted rgba(1, 1, 1, 1);
      padding: 1rem 0.2rem 1rem 0.2rem;
      text-align: center;
      margin: 1rem 0.2rem 1rem 0.2rem;
      background: content-box no-repeat
          linear-gradient(217deg, rgba(255, 0, 0, 0.6), rgba(255, 0, 0, 0) 66%),
        linear-gradient(127deg, rgba(0, 255, 0, 0.6), rgba(0, 255, 0, 0) 66%),
        linear-gradient(336deg, rgba(0, 0, 255, 0.6), rgba(0, 0, 255, 0) 66%);
    }
  }

  .css-work {
    & > img {
      width: 100%;
      height: 34rem;
    }
    & > p {
      width: 500px; // fallback for old browser not support calc()
      width: calc(100% - 40px);
    }
  }

  .get-scss-content {
    margin: 1rem 0 1rem 0;
    border: .1rem solid black;
    padding: 0 1rem 0 1rem;
    #scssFile {
      pre > code {
        white-space: pre-wrap;
      }
    }
  }
}

@counter-style blacknwhite {
  // can't place it inside cascading scss
  system: cyclic;
  symbols: ◆ ◇;
  suffix: ' ';
}
@supports (transform: rotate(0.5turn)) {
}
@supports (
  (perspective: 10px) or (-moz-perspective: 10px) or (-webkit-perspective: 10px)
    or (-ms-perspective: 10px) or (-o-perspective: 10px)
) {
}
@supports not ((text-align-last: justify) or (-moz-text-align-last: justify)) {
}
@supports (--foo: red) {
  .class {
    color: var(--foo);
  }
}
@supports not selector(:is(a, b)) {
  // Fallback for when :is() is unsupported
}
@page :first {
}
@font-face {
  font-family: 'Courier New', Courier, monospace;
  src: url();
}

@keyframes exp1 {
  // didn't add 0%, so use selector's default value
  // same as from/to
  50% {
    opacity: 0.5;
  }
  100% {
    opacity: 1;
  }
}
@keyframes exp2 {
}
@keyframes exp2 {
} // two same keyframes, use last one
@keyframes exp3 {
  0% {
    top: 0;
    left: 0;
  }
  30% {
    top: 2.5rem;
  }
  68%,
  72% {
    left: 2.5rem;
  }
  100% {
    top: 5rem;
    left: 100%;
  }
  // top: 0%, 30%, 100%
  // left: 0%, 68%, 72%, 100%
}
@keyframes exp3 {
  0% {
    top: 0;
    left: 0;
  }
  30% {
    top: 2.5rem;
  }
  30% {
    top: 2rem;
  }
  100% {
    left: 100% !important;
  } // ignored
  // 30%: top: 2rem
}
